#If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. 
#The sum of these multiples is 23.
#Find the sum of all the multiples of 3 or 5 below 1000.
def sum_of_multiples(num)
  return 0 if num == 0

  if num % 3 == 0 || num % 5 == 0
    num + sum_of_multiples(num - 1)
  else
    sum_of_multiples(num - 1)
  end
end
#puts sum_of_multiples(1000)
#puts sum_of_multiples(10)
#puts sum_of_multiples(0)

#Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
#By starting with 1 and 2, the first 10 terms will be:
#1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#By considering the terms in the Fibonacci sequence whose values do not exceed four million 
#Find the sum of the even-valued terms.

def sum_of_even_fibs
  fib_array = [0,1]

  while fib_array[-1] < 4000000
    fib_num = fib_array[-2] + fib_array[-1]
    fib_array << fib_num
  end

  even_fibs = 0
  fib_array.each do |num|
    if num % 2 == 0
      even_fibs += num
    end
  end

  even_fibs
end

#puts sum_of_even_fibs

#The prime factors of 13195 are 5, 7, 13 and 29.
#What is the largest prime factor of the number 600851475143?

def largest_prime_factor(num)
  largest_prime_number = 0
  (2..Math.sqrt(num)).each do |small_num|
    if num % small_num == 0
      if is_prime?(small_num)
        largest_prime_number = small_num
      end
    end
  end
  return largest_prime_number
end

def is_prime?(num)
  return false if num <= 1

  (2...num).each do |small_num|
    return false if num % small_num == 0
  end
  return true
end

#puts largest_prime_factor(13195)
#For big numbers 
#Solves if you go from 2 to Square root of num
#puts largest_prime_factor(600851475143)